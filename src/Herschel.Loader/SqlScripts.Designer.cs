//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Herschel.Loader {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SqlScripts {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SqlScripts() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Herschel.Loader.SqlScripts", typeof(SqlScripts).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TABLE PointingTemp.
        /// </summary>
        internal static string CleanupPointing {
            get {
                return ResourceManager.GetString("CleanupPointing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BULK INSERT [PointingTemp]
        ///FROM &apos;[$datafile]&apos;
        ///WITH 
        ///( 
        ///   DATAFILETYPE = &apos;char&apos;,
        ///   FIELDTERMINATOR = &apos; &apos;,
        ///   ROWTERMINATOR = &apos;\n&apos;,
        ///   TABLOCK
        ///).
        /// </summary>
        internal static string LoadPointing {
            get {
                return ResourceManager.GetString("LoadPointing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE CLUSTERED INDEX [IC_PointingTemp] ON [dbo].[PointingTemp]
        ///(
        ///	[obsID] ASC,
        ///	[fineTime] ASC
        ///)
        ///
        ///
        ///-- Check duplicates
        ///
        ////*SELECT obsID, fineTime, COUNT(*)
        ///FROM PointingTemp
        ///GROUP BY obsID, fineTime
        ///HAVING COUNT(*) &gt; 1*/
        ///
        ///INSERT Pointing WITH (TABLOCKX)
        ///SELECT * FROM PointingTemp
        ///.
        /// </summary>
        internal static string MergePointing {
            get {
                return ResourceManager.GetString("MergePointing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF OBJECT_ID (N&apos;PointingTemp&apos;, N&apos;U&apos;) IS NOT NULL
        ///DROP TABLE [PointingTemp]
        ///
        ///CREATE TABLE [PointingTemp]
        ///(
        ///	[obsID] [bigint] NOT NULL,
        ///	[fineTime] [bigint] NOT NULL,
        ///	[bbID] [bigint] NOT NULL,
        ///	[ra] [float] NOT NULL,
        ///	[raError] [float] NOT NULL,
        ///	[dec] [float] NOT NULL,
        ///	[decError] [float] NOT NULL,
        ///	[pa] [float] NOT NULL,
        ///	[paError] [float] NOT NULL,
        ///	[avX] [float] NOT NULL,
        ///	[avXError] [float] NOT NULL,
        ///	[avY] [float] NOT NULL,
        ///	[avYError] [float] NOT NULL,
        ///	[avZ] [float] NOT NULL,
        ///	[avZ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PreparePointing {
            get {
                return ResourceManager.GetString("PreparePointing", resourceCulture);
            }
        }
    }
}
